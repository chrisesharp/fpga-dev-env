# Define Ste settings for System Verilog files.

# System Verilog files
file.patterns.systemverilog=*.sv;*.systemverilog
filter.systemverilog=System Verilog (system verilog)|$(file.patterns.systemverilog)|

lexer.$(file.patterns.systemverilog)=systemverilog

word.chars.systemverilog=$(chars.alpha)$(chars.numeric)_`$#
word.characters.$(file.patterns.systemverilog)=$(word.chars.systemverilog)

calltip.systemverilog.word.characters=$(chars.alpha)$(chars.numeric)_$

comment.block.systemverilog=//
#comment.block.at.line.start.systemverilog=1
comment.stream.start.systemverilog=/*
comment.stream.end.systemverilog=*/
comment.box.start.systemverilog=/*
comment.box.middle.systemverilog= *
comment.box.end.systemverilog= */

fold.systemverilog.flags=0

#statement.lookback.$(file.patterns.systemverilog)=20
#block.start.$(file.patterns.systemverilog)=5 begin
#block.end.$(file.patterns.systemverilog)=5 end
statement.indent.$(file.patterns.systemverilog)=5 always case casex casez else for if while module function task begin 


indent.maintain.$(file.patterns.systemverilog)=1

preprocessor.symbol.$(file.patterns.systemverilog)=`
preprocessor.start.$(file.patterns.systemverilog)=ifdef
preprocessor.middle.$(file.patterns.systemverilog)=else
preprocessor.end.$(file.patterns.systemverilog)=endif

keywordclass.systemverilog= accept_on alias always always_comb always_ff always_latch and assert \
assign assume automatic before begin bind bins binsof bit break \
buf bufif0 bufif1 byte case casex casez cell chandle checker \
class clocking cmos config const constraint context continue \
cover covergroup coverpoint cross deassign default defparam design \
disable dist do edge else end endcase endchecker endclass endclocking \
endconfig endfunction endgenerate endgroup endinterface endmodule \
endpackage endprimitive endprogram endproperty endspecify endsequence \
endtable endtask enum event eventually expect export extends extern final \
first_match for force foreach forever fork forkjoin function generate genvar \
global highz0 highz1 if iff ifnone ignore_bins illegal_bins implies import \
incdir include initial inout input inside instance int integer interface \
intersect join join_any join_none large let liblist library local localparam \
logic longint macromodule matches medium modport module nand negedge new \
nexttime nmos nor noshowcancelled not notif0 notif1 null or output \
package packed parameter pmos posedge primitive priority program \
property protected pull0 pull1 pulldown pullup pulsestyle_ondetect pulsestyle_onevent \
pure rand randc randcase randsequence rcmos real realtime ref reg \
reject_on release repeat restrict return rnmos rpmos rtran rtranif0 rtranif1 \
s_always s_eventually s_nexttime s_until s_until_with scalared sequence shortint \
shortreal showcancelled signed small solve specify specparam static \
string strong strong0 strong1 struct super supply0 supply1 \
sync_accept_on sync_reject_on table tagged task this throughout time \
timeprecision timeunit tran tranif0 tranif1 tri tri0 tri1 triand trior trireg type \
typedef union unique unique0 unsigned until until_with untyped use uwire var vectored \
virtual void wait wait_order wand weak weak0 weak1 while wildcard wire with \
within wor xnor xor

keywords.$(file.patterns.systemverilog)=$(keywordclass.systemverilog)

keywords3.$(file.patterns.systemverilog)=$finish $stop $exit $realtime $stime $time $printtimescale $timeformat $bitstoreal $realtobits \
$bitstoshortreal $shortrealtobits $itor $rtoi $signed $unsigned $cast \
$bits $isunbounded $typename $unpacked_dimensions $dimensions $left $right \
$low $high $increment $size $clog2 $asin $ln $acos $log10 $atan \
$exp $atan2 $sqrt $hypot $pow $sinh $floor $cosh $ceil $tanh $sin $asinh \
$cos $acosh $tan $atanh $fatal $error $warning $info $asserton $assertoff \
$assertkill $assertpasson $assertpassoff $assertfailon $assertfailoff \
$assertnonvacuouson $assertvacuousoff $onehot $onehot0 $isunknown $sampled \
$rose $fell $stable $changed $past $countones $past_gclk $rose_gclk \
$fell_gclk $stable_gclk $changed_gclk $future_gclk $rising_gclk $falling_gclk \
$steady_gclk $changing_gclk $coverage_control $coverage_get_max \
$coverage_get $coverage_merge $coverage_save $get_coverage \
$set_coverage_db_name $load_coverage_db $random $dist_chi_square \
$dist_erlang $dist_exponential $dist_normal $dist_poisson $dist_t $dist_uniform \
$q_initialize $q_add $q_remove $q_full $q_exam  $async$and$array $async$and$plane \
$async$nand$array $async$nand$plane $async$or$array $async$or$plane \
$async$nor$array $async$nor$plane $sync$and$array $sync$and$plane \
$sync$nand$array $sync$nand$plane $sync$or$array $sync$or$plane \
$sync$nor$array $sync$nor$plane $system $display $write $displayb $writeb \
$displayh $writeh $displayo $writeo $strobe $monitor $strobeb $monitorb \
$strobeh $monitorh $strobeo $monitoro $monitoroff $monitoron \
$fclose $fopen $fdisplay $fwrite $fdisplayb $fwriteb $fdisplayh $fwriteh \
$fdisplayo $fwriteo $fstrobe $fmonitor $fstrobeb $fmonitorb $fstrobeh $fmonitorh \
$fstrobeo $fmonitoro $swrite $sformat $swriteb $sformatf $swriteh $fgetc \
$swriteo $ungetc $fscanf $fgets $fread $sscanf $fseek $rewind $fflush $ftell \
$feof $ferror $readmemb $readmemh $writememb $writememh $test$plusargs $value$plusargs \
$dumpfile $dumpvars $dumpoff $dumpon $dumpall $dumplimit $dumpflush $dumpports \
$dumpportsoff $dumpportson $dumpportsall $dumpportslimit $dumpportsflush \
$countdrivers $countdrivers $getpattern $incsave $input $key $list $log \
$nokey $nolog $reset $reset_count $reset_value $restart $save $scale \
$scope $showscopes $showvars $sreadmemb $sreadmemh $set_coverage_db_name \
$load_coverage_db $get_coverage
# System Verilog styles

# Default
style.systemverilog.32=$(font.base)
# White space
style.systemverilog.0=fore:#808080
# Comment
style.systemverilog.1=$(colour.code.comment.box),$(font.code.comment.box)
# Line Comment
style.systemverilog.2=$(colour.code.comment.line),$(font.code.comment.line)
# Bang comment
style.systemverilog.3=fore:#3F7F3F,$(font.code.comment.line),back:#E0F0FF,eolfilled
# Number
style.systemverilog.4=$(colour.number)
# Keyword
style.systemverilog.5=$(colour.keyword)
# Double quoted string
style.systemverilog.6=$(colour.string),$(font.string.literal)
# Keyword2
style.systemverilog.7=$(colour.keyword)
# System tasks
style.systemverilog.8=fore:#804020
# Preprocessor
style.systemverilog.9=$(colour.preproc)
# Operators
#style.systemverilog.10=$(colour.operator),bold
style.systemverilog.10=$(colour.operator),bold
# Identifiers
style.systemverilog.11=
# End of line where string is not closed
style.systemverilog.12=fore:#000000,$(font.string.literal),back:#E0C0E0,eolfilled
# User defined identifiers and tasks
style.systemverilog.19=fore:#804020,$(font.code.comment.doc)
# Braces are only matched in operator style
braces.systemverilog.style=10

